name: Deploy

on:
  repository_dispatch:
    types: [TEST_BACK_TRIGGER]

env:
  DOCKER_IMAGE: ghcr.io/${{ secrets.Actor }}/${{ secrets.Docker_Image }}
  VERSION: ${{ github.sha }}
  NAME: ${{ secrets.Docker_Image }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto' 

      ## grable cacing
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      ## create application.properties      
      - name: Create application.yml for CD Deploy
        run: |
          mkdir -p src/main/resources
          pwd
          echo "${{ secrets.CD_DEPLOY_CONFIG }}" > src/main/resources/application.properties
          cat src/main/resources/application.properties

      ## naver oauth
      - name: Create naver.properties for CD Deploy
        run: |
          mkdir -p src/main/resources
          pwd
          echo "${{ secrets.NAVER_PROPERTIES }}" > src/main/resources/naver.properties
          cat src/main/resources/naver.properties

      ## kakao oauth
      - name: Create kakao.properties for CD Deploy
        run: |
          mkdir -p src/main/resources
          pwd
          echo "${{ secrets.KAKAO_PROPERTIES }}" > src/main/resources/kakao.properties
          cat src/main/resources/kakao.properties

      ## redis key
      - name: Create redis.properties for CD Deploy
        run: |
          mkdir -p src/main/resources
          pwd
          echo "${{ secrets.REDIS.PROPERTIES }}" > src/main/resources/redis.properties
          cat src/main/resources/redis.properties
          
      ## chmod gradlew      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
        run: |
            docker login ghcr.io -u ${{ secrets.Actor }} -p ${{ secrets.GHCR_TOKEN }}
            docker buildx create --name arm64builder --use
            docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/${{ secrets.Actor }}/${{ secrets.Docker_Image }}:latest --push .
            docker logout

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-backend ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.Actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            pwd
            ls -al
            cd DaeBoo/spring/actions-runner
            pwd
            if [[ "$(docker ps -q --filter ancestor=mysql:8.1)" ]]; then
              docker rm -f $(docker ps -qa --filter ancestor=mysql:8.1)
            fi
            echo "pass mysql-container"

            if [[ "$(docker ps -qa --filter ancestor=actions-runner/${{ secrets.Docker_Image }})" ]]; then
              docker rm -f $(docker ps -qa --filter ancestor=actions-runner/${{ secrets.Docker_Image }})
            fi
            echo "pass actions-runner/${{ secrets.Docker_Image }}"
  
            docker login ghcr.io -u ${{ secrets.Actor }} -p ${{ secrets.GHCR_TOKEN }}
            
            docker pull ghcr.io/${{ secrets.Actor }}/${{ secrets.Docker_Image }}:latest

            docker image prune -f
            docker logout
            docker-compose up -d
